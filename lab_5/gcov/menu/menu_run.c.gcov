        -:    0:Source:src/menu/menu_run.c
        -:    0:Graph:./obj//menu/menu_run.gcno
        -:    0:Data:./obj//menu/menu_run.gcda
        -:    0:Runs:3
        -:    1:#include <string.h>
        -:    2:#include "utils/colors.h"
        -:    3:#include "menu.h"
        -:    4:#include "core/worker.h"
        -:    5:
        4:    6:static int parse_imp_char(const char *str, queue_imp_t *type)
        -:    7:{
        4:    8:    int status = strlen(str) == 1 ? EXIT_SUCCESS : EXIT_FAILURE;
        -:    9:
        4:   10:    if (status == EXIT_SUCCESS)
        -:   11:    {
        4:   12:        switch (str[0])
        -:   13:        {
        3:   14:            case 'a': case 'A': case '1':
        3:   15:                *type = QUEUE_ARRAY;
        3:   16:                break;
        1:   17:            case 'l': case 'L': case '2':
        1:   18:                *type = QUEUE_LINKED_LIST;
        1:   19:                break;
    #####:   20:            default:
    #####:   21:                status = EXIT_FAILURE;
    #####:   22:                break;
        -:   23:        }
    #####:   24:    }
        -:   25:
        4:   26:    return status;
        -:   27:}
        -:   28:
        4:   29:static void print_queue_stats(queue_stats_t *stats)
        -:   30:{
        -:   31:    // printf("    Суммарное время работы очереди:    %7.2f е.в. (%7llu мкс)\n",
        -:   32:    //    stats->total_push_time + stats->total_pop_time, stats->total_push_us + stats->total_pop_us);
        4:   33:    printf("    Суммарное время прихода заявок:      %7.2f е.в. (%7llu мкс)\n",
        4:   34:        stats->total_push_time, stats->total_push_us);
        4:   35:    printf("    Суммарное время обработки заявок:    %7.2f е.в. (%7llu мкс)\n",
        4:   36:        stats->total_pop_time, stats->total_pop_us);
        4:   37:    printf("    Среднее время прихода заявки:        %7.2f е.в. (%7u нс )\n",
        4:   38:        stats->avg_push_time, stats->avg_push_ns);
        4:   39:    printf("    Среднее время обработки заявки:      %7.2f е.в. (%7u нс )\n",
        4:   40:        stats->avg_pop_time, stats->avg_pop_ns);
        4:   41:    printf("    Среднее время пребывания в очереди:  %7.2f е.в.\n", stats->avg_wait_time);
        4:   42:    printf("    Число заявок в очереди сейчас:       %7u\n", stats->curr_size);
        4:   43:    printf("    Максимальное число заявок в очереди: %7u\n", stats->max_size);
        -:   44:
        -:   45:#if defined(FUNC_TEST) && defined(FUNC_TEST_FNAME)
        4:   46:    FILE *out_file = fopen(FUNC_TEST_FNAME, "at");
        -:   47:
        4:   48:    fprintf(out_file, "%.2f %.2f %.2f %.2f %.2f %u %u\n",
        4:   49:            stats->total_push_time, stats->total_pop_time, stats->avg_push_time,
        4:   50:            stats->avg_pop_time, stats->avg_wait_time, stats->curr_size, stats->max_size);
        -:   51:
        4:   52:    fclose(out_file);
        -:   53:#endif
        4:   54:}
        -:   55:
        4:   56:static float _time_mid(time_interval_t interval)
        -:   57:{
        4:   58:    return 0.5f * (interval.begin + interval.end);
        -:   59:}
        -:   60:
        2:   61:static void print_theor_stats(struct worker *wk, uint32_t requests_1)
        -:   62:{
        2:   63:    float time_in = _time_mid(wk->params.t_in1);
        2:   64:    float time_out = _time_mid(wk->params.t_out1);
        2:   65:    float full_time_in = (requests_1 - 1U) * time_in;
        2:   66:    float full_time_out = (requests_1 - 1U) * time_out;
       2*:   67:    float full_time = time_in + (full_time_in > full_time_out ? full_time_in : full_time_out) + time_out;
        -:   68:
        2:   69:    printf("\n  " CLR_BR_YELLOW_U "Теоритические рассчёты:" CLR_RESET "\n");
        2:   70:    printf("    Среднее полное время обработки заявок: %.2f е.в.\n", full_time);
        -:   71:
        -:   72:#if defined(FUNC_TEST) && defined(FUNC_TEST_FNAME)
        2:   73:    FILE *out_file = fopen(FUNC_TEST_FNAME, "at");
        -:   74:
        2:   75:    fprintf(out_file, "%.2f\n", full_time);
        -:   76:
        2:   77:    fclose(out_file);
        -:   78:#endif
        2:   79:}
        -:   80:
        2:   81:static void print_worker_stats(struct worker *wk)
        -:   82:{
        2:   83:    printf("\n  " CLR_BR_MAGENTA_U "Статистика первой очереди:" CLR_RESET "\n");
        2:   84:    print_queue_stats(&wk->stats.qu1);
        2:   85:    printf("\n  " CLR_BR_MAGENTA_U "Статистика второй очереди:" CLR_RESET "\n");
        2:   86:    print_queue_stats(&wk->stats.qu2);
        2:   87:    printf("\n  " CLR_BR_MAGENTA_U "Статистика обслуживающего аппарата:" CLR_RESET "\n");
        2:   88:    printf("    Полное время обработки заявок:       %.2f е.в.\n", wk->stats.time);
        2:   89:    printf("    Всего поступило заявок:              %u\n", wk->stats.request_index);
        2:   90:    printf("      Первого типа:                      %u\n", wk->stats.requests_1);
        2:   91:    printf("      Второго типа:                      %u\n", wk->stats.requests_2);
        2:   92:    printf("    Отклонено заявок из 2 очереди:       %u\n", wk->stats.request_dismissed);
        -:   93:
        -:   94:#if defined(FUNC_TEST) && defined(FUNC_TEST_FNAME)
        2:   95:    FILE *out_file = fopen(FUNC_TEST_FNAME, "at");
        -:   96:
        2:   97:    fprintf(out_file, "%.2f %u %u %u %u\n",
        2:   98:            wk->stats.time, wk->stats.request_index, wk->stats.requests_1,
        -:   99:            wk->stats.requests_2, wk->stats.request_dismissed);
        -:  100:
        2:  101:    fclose(out_file);
        -:  102:#endif
        2:  103:}
        -:  104:
        4:  105:int menu_run(cmdf_arglist *arglist)
        -:  106:{
        -:  107:    queue_imp_t qu1_imp;
        -:  108:    queue_imp_t qu2_imp;
        -:  109:
        6:  110:    if (!arglist || arglist->count != 2 ||
        4:  111:        parse_imp_char(arglist->args[0], &qu1_imp) ||
        2:  112:        parse_imp_char(arglist->args[1], &qu2_imp))
        -:  113:    {
        2:  114:        printf("Использование: " CLR_EMPH "run [очередь 1] [очередь 2]" CLR_RESET ", где\n");
        2:  115:        printf("    очередь 1 - реализация очереди высокого приоритета: "
        -:  116:            CLR_BR_GREEN_U "A" CLR_RESET " (массив) или " CLR_BR_GREEN_U "L" CLR_RESET " (список),\n");
        2:  117:        printf("    очередь 2 - реализация очереди низкого приоритета: "
        -:  118:            CLR_BR_GREEN_U "A" CLR_RESET " (массив) или " CLR_BR_GREEN_U "L" CLR_RESET " (список).\n");
        -:  119:    }
        -:  120:    else
        -:  121:    {
        2:  122:        const uint32_t requests_count = 2U;
        2:  123:        struct worker wk = wk_create(qu1_imp, qu2_imp, requests_count);
        2:  124:        wk.params = wk_params;
        -:  125:
        2:  126:        int status = wk_model_run(&wk, requests_count);
        2:  127:        if (status != EXIT_SUCCESS)
    #####:  128:            printf("При моделировании возникли серьёзные неисправности!\n");
        -:  129:
        2:  130:        print_worker_stats(&wk);
        2:  131:        print_theor_stats(&wk, requests_count);
        2:  132:        wk_destroy(&wk);
        -:  133:    }
        -:  134:
        4:  135:    return EXIT_SUCCESS;
        -:  136:}
